{
  "resourceType": "Binary",
  "id": "binary-cql-grammar",
  "contentType": "text/plain",
  "data": "Z3JhbW1hciBjcWw7CgovKgogKiBDbGluaWNhbCBRdWFsaXR5IExhbmd1YWdlIEdyYW1tYXIgU3BlY2lmaWNhdGlvbgogKiBWZXJzaW9uIDEuMyAtIFNUVTMgUHVibGljYXRpb24KICovCgppbXBvcnQgZmhpcnBhdGg7CgovKgogKiBQYXJzZXIgUnVsZXMKICovCgpsaWJyYXJ5CiAgICA6CiAgICBsaWJyYXJ5RGVmaW5pdGlvbj8KICAgIHVzaW5nRGVmaW5pdGlvbioKICAgIGluY2x1ZGVEZWZpbml0aW9uKgogICAgY29kZXN5c3RlbURlZmluaXRpb24qCiAgICB2YWx1ZXNldERlZmluaXRpb24qCiAgICBjb2RlRGVmaW5pdGlvbioKICAgIGNvbmNlcHREZWZpbml0aW9uKgogICAgcGFyYW1ldGVyRGVmaW5pdGlvbioKICAgIHN0YXRlbWVudCoKICAgIDsKCi8qCiAqIERlZmluaXRpb25zCiAqLwoKbGlicmFyeURlZmluaXRpb24KICAgIDogJ2xpYnJhcnknIGlkZW50aWZpZXIgKCd2ZXJzaW9uJyB2ZXJzaW9uU3BlY2lmaWVyKT8KICAgIDsKCnVzaW5nRGVmaW5pdGlvbgogICAgOiAndXNpbmcnIG1vZGVsSWRlbnRpZmllciAoJ3ZlcnNpb24nIHZlcnNpb25TcGVjaWZpZXIpPwogICAgOwoKaW5jbHVkZURlZmluaXRpb24KICAgIDogJ2luY2x1ZGUnIGlkZW50aWZpZXIgKCd2ZXJzaW9uJyB2ZXJzaW9uU3BlY2lmaWVyKT8gKCdjYWxsZWQnIGxvY2FsSWRlbnRpZmllcik/CiAgICA7Cgpsb2NhbElkZW50aWZpZXIKICAgIDogaWRlbnRpZmllcgogICAgOwoKYWNjZXNzTW9kaWZpZXIKICAgIDogJ3B1YmxpYycKICAgIHwgJ3ByaXZhdGUnCiAgICA7CgpwYXJhbWV0ZXJEZWZpbml0aW9uCiAgICA6IGFjY2Vzc01vZGlmaWVyPyAncGFyYW1ldGVyJyBpZGVudGlmaWVyICh0eXBlU3BlY2lmaWVyKT8gKCdkZWZhdWx0JyBleHByZXNzaW9uKT8KICAgIDsKCmNvZGVzeXN0ZW1EZWZpbml0aW9uCiAgICA6IGFjY2Vzc01vZGlmaWVyPyAnY29kZXN5c3RlbScgaWRlbnRpZmllciAnOicgY29kZXN5c3RlbUlkICgndmVyc2lvbicgdmVyc2lvblNwZWNpZmllcik/CiAgICA7Cgp2YWx1ZXNldERlZmluaXRpb24KICAgIDogYWNjZXNzTW9kaWZpZXI/ICd2YWx1ZXNldCcgaWRlbnRpZmllciAnOicgdmFsdWVzZXRJZCAoJ3ZlcnNpb24nIHZlcnNpb25TcGVjaWZpZXIpPyBjb2Rlc3lzdGVtcz8KICAgIDsKCmNvZGVzeXN0ZW1zCiAgICA6ICdjb2Rlc3lzdGVtcycgJ3snIGNvZGVzeXN0ZW1JZGVudGlmaWVyICgnLCcgY29kZXN5c3RlbUlkZW50aWZpZXIpKiAnfScKICAgIDsKCmNvZGVzeXN0ZW1JZGVudGlmaWVyCiAgICA6IChsaWJyYXJ5SWRlbnRpZmllciAnLicpPyBpZGVudGlmaWVyCiAgICA7CgpsaWJyYXJ5SWRlbnRpZmllcgogICAgOiBpZGVudGlmaWVyCiAgICA7Cgpjb2RlRGVmaW5pdGlvbgogICAgOiBhY2Nlc3NNb2RpZmllcj8gJ2NvZGUnIGlkZW50aWZpZXIgJzonIGNvZGVJZCAnZnJvbScgY29kZXN5c3RlbUlkZW50aWZpZXIgZGlzcGxheUNsYXVzZT8KICAgIDsKCmNvbmNlcHREZWZpbml0aW9uCiAgICA6IGFjY2Vzc01vZGlmaWVyPyAnY29uY2VwdCcgaWRlbnRpZmllciAnOicgJ3snIGNvZGVJZGVudGlmaWVyICgnLCcgY29kZUlkZW50aWZpZXIpKiAnfScgZGlzcGxheUNsYXVzZT8KICAgIDsKCmNvZGVJZGVudGlmaWVyCiAgICA6IChsaWJyYXJ5SWRlbnRpZmllciAnLicpPyBpZGVudGlmaWVyCiAgICA7Cgpjb2Rlc3lzdGVtSWQKICAgIDogU1RSSU5HCiAgICA7Cgp2YWx1ZXNldElkCiAgICA6IFNUUklORwogICAgOwoKdmVyc2lvblNwZWNpZmllcgogICAgOiBTVFJJTkcKICAgIDsKCmNvZGVJZAogICAgOiBTVFJJTkcKICAgIDsKCi8qCiAqIFR5cGUgU3BlY2lmaWVycwogKi8KCnR5cGVTcGVjaWZpZXIKICAgIDogbmFtZWRUeXBlU3BlY2lmaWVyCiAgICB8IGxpc3RUeXBlU3BlY2lmaWVyCiAgICB8IGludGVydmFsVHlwZVNwZWNpZmllcgogICAgfCB0dXBsZVR5cGVTcGVjaWZpZXIKICAgIHwgY2hvaWNlVHlwZVNwZWNpZmllcgogICAgOwoKbmFtZWRUeXBlU3BlY2lmaWVyCiAgICA6IChxdWFsaWZpZXIgJy4nKSogaWRlbnRpZmllcgogICAgOwoKbW9kZWxJZGVudGlmaWVyCiAgICA6IGlkZW50aWZpZXIKICAgIDsKCmxpc3RUeXBlU3BlY2lmaWVyCiAgICA6ICdMaXN0JyAnPCcgdHlwZVNwZWNpZmllciAnPicKICAgIDsKCmludGVydmFsVHlwZVNwZWNpZmllcgogICAgOiAnSW50ZXJ2YWwnICc8JyB0eXBlU3BlY2lmaWVyICc+JwogICAgOwoKdHVwbGVUeXBlU3BlY2lmaWVyCiAgICA6ICdUdXBsZScgJ3snIHR1cGxlRWxlbWVudERlZmluaXRpb24gKCcsJyB0dXBsZUVsZW1lbnREZWZpbml0aW9uKSogJ30nCiAgICA7Cgp0dXBsZUVsZW1lbnREZWZpbml0aW9uCiAgICA6IGlkZW50aWZpZXIgdHlwZVNwZWNpZmllcgogICAgOwoKY2hvaWNlVHlwZVNwZWNpZmllcgogICAgOiAnQ2hvaWNlJyAnPCcgdHlwZVNwZWNpZmllciAoJywnIHR5cGVTcGVjaWZpZXIpKiAnPicKICAgIDsKCi8qCiAqIFN0YXRlbWVudHMKICovCgpzdGF0ZW1lbnQKICAgIDogZXhwcmVzc2lvbkRlZmluaXRpb24KICAgIHwgY29udGV4dERlZmluaXRpb24KICAgIHwgZnVuY3Rpb25EZWZpbml0aW9uCiAgICA7CgpleHByZXNzaW9uRGVmaW5pdGlvbgogICAgOiAnZGVmaW5lJyBhY2Nlc3NNb2RpZmllcj8gaWRlbnRpZmllciAnOicgZXhwcmVzc2lvbgogICAgOwoKY29udGV4dERlZmluaXRpb24KICAgIDogJ2NvbnRleHQnIGlkZW50aWZpZXIKICAgIDsKCmZ1bmN0aW9uRGVmaW5pdGlvbgogICAgOiAnZGVmaW5lJyBhY2Nlc3NNb2RpZmllcj8gJ2Z1bmN0aW9uJyBpZGVudGlmaWVyICcoJyAob3BlcmFuZERlZmluaXRpb24gKCcsJyBvcGVyYW5kRGVmaW5pdGlvbikqKT8gJyknCiAgICAgICAgKCdyZXR1cm5zJyB0eXBlU3BlY2lmaWVyKT8KICAgICAgICAnOicgKGZ1bmN0aW9uQm9keSB8ICdleHRlcm5hbCcpCiAgICA7CgpvcGVyYW5kRGVmaW5pdGlvbgogICAgOiBpZGVudGlmaWVyIHR5cGVTcGVjaWZpZXIKICAgIDsKCmZ1bmN0aW9uQm9keQogICAgOiBleHByZXNzaW9uCiAgICA7CgovKgogKiBFeHByZXNzaW9ucwogKi8KCnF1ZXJ5U291cmNlCiAgICA6IHJldHJpZXZlCiAgICB8IHF1YWxpZmllZElkZW50aWZpZXIKICAgIHwgJygnIGV4cHJlc3Npb24gJyknCiAgICA7CgphbGlhc2VkUXVlcnlTb3VyY2UKICAgIDogcXVlcnlTb3VyY2UgYWxpYXMKICAgIDsKCmFsaWFzCiAgICA6IGlkZW50aWZpZXIKICAgIDsKCnF1ZXJ5SW5jbHVzaW9uQ2xhdXNlCiAgICA6IHdpdGhDbGF1c2UKICAgIHwgd2l0aG91dENsYXVzZQogICAgOwoKd2l0aENsYXVzZQogICAgOiAnd2l0aCcgYWxpYXNlZFF1ZXJ5U291cmNlICdzdWNoIHRoYXQnIGV4cHJlc3Npb24KICAgIDsKCndpdGhvdXRDbGF1c2UKICAgIDogJ3dpdGhvdXQnIGFsaWFzZWRRdWVyeVNvdXJjZSAnc3VjaCB0aGF0JyBleHByZXNzaW9uCiAgICA7CgpyZXRyaWV2ZQogICAgOiAnWycgbmFtZWRUeXBlU3BlY2lmaWVyICgnOicgKGNvZGVQYXRoICdpbicpPyB0ZXJtaW5vbG9neSk/ICddJwogICAgOwoKY29kZVBhdGgKICAgIDogaWRlbnRpZmllcgogICAgOwoKdGVybWlub2xvZ3kKICAgIDogcXVhbGlmaWVkSWRlbnRpZmllcgogICAgfCBleHByZXNzaW9uCiAgICA7CgpxdWFsaWZpZXIKICAgIDogaWRlbnRpZmllcgogICAgOwoKcXVlcnkKICAgIDogc291cmNlQ2xhdXNlIGxldENsYXVzZT8gcXVlcnlJbmNsdXNpb25DbGF1c2UqIHdoZXJlQ2xhdXNlPyByZXR1cm5DbGF1c2U/IHNvcnRDbGF1c2U/CiAgICA7Cgpzb3VyY2VDbGF1c2UKICAgIDogJ2Zyb20nPyBhbGlhc2VkUXVlcnlTb3VyY2UgKCcsJyBhbGlhc2VkUXVlcnlTb3VyY2UpKgogICAgOwoKbGV0Q2xhdXNlCiAgICA6ICdsZXQnIGxldENsYXVzZUl0ZW0gKCcsJyBsZXRDbGF1c2VJdGVtKSoKICAgIDsKCmxldENsYXVzZUl0ZW0KICAgIDogaWRlbnRpZmllciAnOicgZXhwcmVzc2lvbgogICAgOwoKd2hlcmVDbGF1c2UKICAgIDogJ3doZXJlJyBleHByZXNzaW9uCiAgICA7CgpyZXR1cm5DbGF1c2UKICAgIDogJ3JldHVybicgKCdhbGwnIHwgJ2Rpc3RpbmN0Jyk/IGV4cHJlc3Npb24KICAgIDsKCnNvcnRDbGF1c2UKICAgIDogJ3NvcnQnICggc29ydERpcmVjdGlvbiB8ICgnYnknIHNvcnRCeUl0ZW0gKCcsJyBzb3J0QnlJdGVtKSopICkKICAgIDsKCnNvcnREaXJlY3Rpb24KICAgIDogJ2FzYycgfCAnYXNjZW5kaW5nJwogICAgfCAnZGVzYycgfCAnZGVzY2VuZGluZycKICAgIDsKCnNvcnRCeUl0ZW0KICAgIDogZXhwcmVzc2lvblRlcm0gc29ydERpcmVjdGlvbj8KICAgIDsKCnF1YWxpZmllZElkZW50aWZpZXIKICAgIDogKHF1YWxpZmllciAnLicpKiBpZGVudGlmaWVyCiAgICA7CgpleHByZXNzaW9uCiAgICA6IGV4cHJlc3Npb25UZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdGVybUV4cHJlc3Npb24KICAgIHwgcmV0cmlldmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZXRyaWV2ZUV4cHJlc3Npb24KICAgIHwgcXVlcnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNxdWVyeUV4cHJlc3Npb24KICAgIHwgZXhwcmVzc2lvbiAnaXMnICdub3QnPyAoJ251bGwnIHwgJ3RydWUnIHwgJ2ZhbHNlJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNib29sZWFuRXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICgnaXMnIHwgJ2FzJykgdHlwZVNwZWNpZmllciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3R5cGVFeHByZXNzaW9uCiAgICB8ICdjYXN0JyBleHByZXNzaW9uICdhcycgdHlwZVNwZWNpZmllciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2FzdEV4cHJlc3Npb24KICAgIHwgJ25vdCcgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNub3RFeHByZXNzaW9uCiAgICB8ICdleGlzdHMnIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXhpc3RlbmNlRXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICdwcm9wZXJseSc/ICdiZXR3ZWVuJyBleHByZXNzaW9uVGVybSAnYW5kJyBleHByZXNzaW9uVGVybSAgICAgICAgICAgICAgICAgICAgICAgICAgI2JldHdlZW5FeHByZXNzaW9uCiAgICB8ICgnZHVyYXRpb24nICdpbicpPyBwbHVyYWxEYXRlVGltZVByZWNpc2lvbiAnYmV0d2VlbicgZXhwcmVzc2lvblRlcm0gJ2FuZCcgZXhwcmVzc2lvblRlcm0gICAgICAjZHVyYXRpb25CZXR3ZWVuRXhwcmVzc2lvbgogICAgfCAnZGlmZmVyZW5jZScgJ2luJyBwbHVyYWxEYXRlVGltZVByZWNpc2lvbiAnYmV0d2VlbicgZXhwcmVzc2lvblRlcm0gJ2FuZCcgZXhwcmVzc2lvblRlcm0gICAgICAgI2RpZmZlcmVuY2VCZXR3ZWVuRXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICgnPD0nIHwgJzwnIHwgJz4nIHwgJz49JykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2luZXF1YWxpdHlFeHByZXNzaW9uCiAgICB8IGV4cHJlc3Npb24gaW50ZXJ2YWxPcGVyYXRvclBocmFzZSBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdGltaW5nRXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICgnPScgfCAnIT0nIHwgJ34nIHwgJyF+JykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VxdWFsaXR5RXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICgnaW4nIHwgJ2NvbnRhaW5zJykgZGF0ZVRpbWVQcmVjaXNpb25TcGVjaWZpZXI/IGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgI21lbWJlcnNoaXBFeHByZXNzaW9uCiAgICB8IGV4cHJlc3Npb24gJ2FuZCcgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYW5kRXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICgnb3InIHwgJ3hvcicpIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI29yRXhwcmVzc2lvbgogICAgfCBleHByZXNzaW9uICdpbXBsaWVzJyBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2ltcGxpZXNFeHByZXNzaW9uCiAgICB8IGV4cHJlc3Npb24gKCd8JyB8ICd1bmlvbicgfCAnaW50ZXJzZWN0JyB8ICdleGNlcHQnKSBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjaW5GaXhTZXRFeHByZXNzaW9uCiAgICA7CgpkYXRlVGltZVByZWNpc2lvbgogICAgOiAneWVhcicgfCAnbW9udGgnIHwgJ3dlZWsnIHwgJ2RheScgfCAnaG91cicgfCAnbWludXRlJyB8ICdzZWNvbmQnIHwgJ21pbGxpc2Vjb25kJwogICAgOwoKZGF0ZVRpbWVDb21wb25lbnQKICAgIDogZGF0ZVRpbWVQcmVjaXNpb24KICAgIHwgJ2RhdGUnCiAgICB8ICd0aW1lJwogICAgfCAndGltZXpvbmUnCiAgICA7CgpwbHVyYWxEYXRlVGltZVByZWNpc2lvbgogICAgOiAneWVhcnMnIHwgJ21vbnRocycgfCAnd2Vla3MnIHwgJ2RheXMnIHwgJ2hvdXJzJyB8ICdtaW51dGVzJyB8ICdzZWNvbmRzJyB8ICdtaWxsaXNlY29uZHMnCiAgICA7CgpleHByZXNzaW9uVGVybQogICAgOiB0ZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdGVybUV4cHJlc3Npb25UZXJtCiAgICB8IGV4cHJlc3Npb25UZXJtICcuJyBpbnZvY2F0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbnZvY2F0aW9uRXhwcmVzc2lvblRlcm0KICAgIHwgZXhwcmVzc2lvblRlcm0gJ1snIGV4cHJlc3Npb24gJ10nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2luZGV4ZWRFeHByZXNzaW9uVGVybQogICAgfCAnY29udmVydCcgZXhwcmVzc2lvbiAndG8nIHR5cGVTcGVjaWZpZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY29udmVyc2lvbkV4cHJlc3Npb25UZXJtCiAgICB8ICgnKycgfCAnLScpIGV4cHJlc3Npb25UZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwb2xhcml0eUV4cHJlc3Npb25UZXJtCiAgICB8ICgnc3RhcnQnIHwgJ2VuZCcpICdvZicgZXhwcmVzc2lvblRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0aW1lQm91bmRhcnlFeHByZXNzaW9uVGVybQogICAgfCBkYXRlVGltZUNvbXBvbmVudCAnZnJvbScgZXhwcmVzc2lvblRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdGltZVVuaXRFeHByZXNzaW9uVGVybQogICAgfCAnZHVyYXRpb24nICdpbicgcGx1cmFsRGF0ZVRpbWVQcmVjaXNpb24gJ29mJyBleHByZXNzaW9uVGVybSAgICAgICAgICAgICAgICAgICAjZHVyYXRpb25FeHByZXNzaW9uVGVybQogICAgfCAnZGlmZmVyZW5jZScgJ2luJyBwbHVyYWxEYXRlVGltZVByZWNpc2lvbiAnb2YnIGV4cHJlc3Npb25UZXJtICAgICAgICAgICAgICAgICAjZGlmZmVyZW5jZUV4cHJlc3Npb25UZXJtCiAgICB8ICd3aWR0aCcgJ29mJyBleHByZXNzaW9uVGVybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3aWR0aEV4cHJlc3Npb25UZXJtCiAgICB8ICdzdWNjZXNzb3InICdvZicgZXhwcmVzc2lvblRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzdWNjZXNzb3JFeHByZXNzaW9uVGVybQogICAgfCAncHJlZGVjZXNzb3InICdvZicgZXhwcmVzc2lvblRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJlZGVjZXNzb3JFeHByZXNzaW9uVGVybQogICAgfCAnc2luZ2xldG9uJyAnZnJvbScgZXhwcmVzc2lvblRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZWxlbWVudEV4dHJhY3RvckV4cHJlc3Npb25UZXJtCiAgICB8ICdwb2ludCcgJ2Zyb20nIGV4cHJlc3Npb25UZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwb2ludEV4dHJhY3RvckV4cHJlc3Npb25UZXJtCiAgICB8ICgnbWluaW11bScgfCAnbWF4aW11bScpIG5hbWVkVHlwZVNwZWNpZmllciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0eXBlRXh0ZW50RXhwcmVzc2lvblRlcm0KICAgIHwgZXhwcmVzc2lvblRlcm0gJ14nIGV4cHJlc3Npb25UZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Bvd2VyRXhwcmVzc2lvblRlcm0KICAgIHwgZXhwcmVzc2lvblRlcm0gKCcqJyB8ICcvJyB8ICdkaXYnIHwgJ21vZCcpIGV4cHJlc3Npb25UZXJtICAgICAgICAgICAgICAgICAgICAgI211bHRpcGxpY2F0aW9uRXhwcmVzc2lvblRlcm0KICAgIHwgZXhwcmVzc2lvblRlcm0gKCcrJyB8ICctJyB8ICcmJykgZXhwcmVzc2lvblRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2FkZGl0aW9uRXhwcmVzc2lvblRlcm0KICAgIHwgJ2lmJyBleHByZXNzaW9uICd0aGVuJyBleHByZXNzaW9uICdlbHNlJyBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgI2lmVGhlbkVsc2VFeHByZXNzaW9uVGVybQogICAgfCAnY2FzZScgZXhwcmVzc2lvbj8gY2FzZUV4cHJlc3Npb25JdGVtKyAnZWxzZScgZXhwcmVzc2lvbiAnZW5kJyAgICAgICAgICAgICAgICAjY2FzZUV4cHJlc3Npb25UZXJtCiAgICB8ICgnZGlzdGluY3QnIHwgJ2ZsYXR0ZW4nKSBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNhZ2dyZWdhdGVFeHByZXNzaW9uVGVybQogICAgfCAoJ2V4cGFuZCcgfCAnY29sbGFwc2UnKSBleHByZXNzaW9uICgncGVyJyAoZGF0ZVRpbWVQcmVjaXNpb24gfCBleHByZXNzaW9uKSk/ICAjc2V0QWdncmVnYXRlRXhwcmVzc2lvblRlcm0KICAgIDsKCmNhc2VFeHByZXNzaW9uSXRlbQogICAgOiAnd2hlbicgZXhwcmVzc2lvbiAndGhlbicgZXhwcmVzc2lvbgogICAgOwoKZGF0ZVRpbWVQcmVjaXNpb25TcGVjaWZpZXIKICAgIDogZGF0ZVRpbWVQcmVjaXNpb24gJ29mJwogICAgOwoKcmVsYXRpdmVRdWFsaWZpZXIKICAgIDogJ29yIGJlZm9yZScKICAgIHwgJ29yIGFmdGVyJwogICAgOwoKb2Zmc2V0UmVsYXRpdmVRdWFsaWZpZXIKICAgIDogJ29yIG1vcmUnCiAgICB8ICdvciBsZXNzJwogICAgOwoKZXhjbHVzaXZlUmVsYXRpdmVRdWFsaWZpZXIKICAgIDogJ2xlc3MgdGhhbicKICAgIHwgJ21vcmUgdGhhbicKICAgIDsKCnF1YW50aXR5T2Zmc2V0CiAgICA6IChxdWFudGl0eSBvZmZzZXRSZWxhdGl2ZVF1YWxpZmllcj8pCiAgICB8IChleGNsdXNpdmVSZWxhdGl2ZVF1YWxpZmllciBxdWFudGl0eSkKICAgIDsKCnRlbXBvcmFsUmVsYXRpb25zaGlwCiAgICA6ICgnb24gb3InPyAoJ2JlZm9yZScgfCAnYWZ0ZXInKSkKICAgIHwgKCgnYmVmb3JlJyB8ICdhZnRlcicpICdvciBvbic/KQogICAgOwoKaW50ZXJ2YWxPcGVyYXRvclBocmFzZQogICAgOiAoJ3N0YXJ0cycgfCAnZW5kcycgfCAnb2NjdXJzJyk/ICdzYW1lJyBkYXRlVGltZVByZWNpc2lvbj8gKHJlbGF0aXZlUXVhbGlmaWVyIHwgJ2FzJykgKCdzdGFydCcgfCAnZW5kJyk/ICAgICAgICAgICAgICAgI2NvbmN1cnJlbnRXaXRoSW50ZXJ2YWxPcGVyYXRvclBocmFzZQogICAgfCAncHJvcGVybHknPyAnaW5jbHVkZXMnIGRhdGVUaW1lUHJlY2lzaW9uU3BlY2lmaWVyPyAoJ3N0YXJ0JyB8ICdlbmQnKT8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2luY2x1ZGVzSW50ZXJ2YWxPcGVyYXRvclBocmFzZQogICAgfCAoJ3N0YXJ0cycgfCAnZW5kcycgfCAnb2NjdXJzJyk/ICdwcm9wZXJseSc/ICgnZHVyaW5nJyB8ICdpbmNsdWRlZCBpbicpIGRhdGVUaW1lUHJlY2lzaW9uU3BlY2lmaWVyPyAgICAgICAgICAgICAgICAgICAgI2luY2x1ZGVkSW5JbnRlcnZhbE9wZXJhdG9yUGhyYXNlCiAgICB8ICgnc3RhcnRzJyB8ICdlbmRzJyB8ICdvY2N1cnMnKT8gcXVhbnRpdHlPZmZzZXQ/IHRlbXBvcmFsUmVsYXRpb25zaGlwIGRhdGVUaW1lUHJlY2lzaW9uU3BlY2lmaWVyPyAoJ3N0YXJ0JyB8ICdlbmQnKT8gICAjYmVmb3JlT3JBZnRlckludGVydmFsT3BlcmF0b3JQaHJhc2UKICAgIHwgKCdzdGFydHMnIHwgJ2VuZHMnIHwgJ29jY3VycycpPyAncHJvcGVybHknPyAnd2l0aGluJyBxdWFudGl0eSAnb2YnICgnc3RhcnQnIHwgJ2VuZCcpPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3aXRoaW5JbnRlcnZhbE9wZXJhdG9yUGhyYXNlCiAgICB8ICdtZWV0cycgKCdiZWZvcmUnIHwgJ2FmdGVyJyk/IGRhdGVUaW1lUHJlY2lzaW9uU3BlY2lmaWVyPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbWVldHNJbnRlcnZhbE9wZXJhdG9yUGhyYXNlCiAgICB8ICdvdmVybGFwcycgKCdiZWZvcmUnIHwgJ2FmdGVyJyk/IGRhdGVUaW1lUHJlY2lzaW9uU3BlY2lmaWVyPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjb3ZlcmxhcHNJbnRlcnZhbE9wZXJhdG9yUGhyYXNlCiAgICB8ICdzdGFydHMnIGRhdGVUaW1lUHJlY2lzaW9uU3BlY2lmaWVyPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3RhcnRzSW50ZXJ2YWxPcGVyYXRvclBocmFzZQogICAgfCAnZW5kcycgZGF0ZVRpbWVQcmVjaXNpb25TcGVjaWZpZXI/ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2VuZHNJbnRlcnZhbE9wZXJhdG9yUGhyYXNlCiAgICA7Cgp0ZXJtCiAgICA6IGludm9jYXRpb24gICAgICAgICAgICAjaW52b2NhdGlvblRlcm0KICAgIHwgbGl0ZXJhbCAgICAgICAgICAgICAgICNsaXRlcmFsVGVybQogICAgfCBleHRlcm5hbENvbnN0YW50ICAgICAgI2V4dGVybmFsQ29uc3RhbnRUZXJtCiAgICB8IGludGVydmFsU2VsZWN0b3IgICAgICAjaW50ZXJ2YWxTZWxlY3RvclRlcm0KICAgIHwgdHVwbGVTZWxlY3RvciAgICAgICAgICN0dXBsZVNlbGVjdG9yVGVybQogICAgfCBpbnN0YW5jZVNlbGVjdG9yICAgICAgI2luc3RhbmNlU2VsZWN0b3JUZXJtCiAgICB8IGxpc3RTZWxlY3RvciAgICAgICAgICAjbGlzdFNlbGVjdG9yVGVybQogICAgfCBjb2RlU2VsZWN0b3IgICAgICAgICAgI2NvZGVTZWxlY3RvclRlcm0KICAgIHwgY29uY2VwdFNlbGVjdG9yICAgICAgICNjb25jZXB0U2VsZWN0b3JUZXJtCiAgICB8ICcoJyBleHByZXNzaW9uICcpJyAgICAjcGFyZW50aGVzaXplZFRlcm0KICAgIDsKCnJhdGlvCiAgICA6IHF1YW50aXR5ICc6JyBxdWFudGl0eQogICAgOwoKbGl0ZXJhbAogICAgICAgIDogKCd0cnVlJyB8ICdmYWxzZScpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Jvb2xlYW5MaXRlcmFsCiAgICAgICAgfCAnbnVsbCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbnVsbExpdGVyYWwKICAgICAgICB8IFNUUklORyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzdHJpbmdMaXRlcmFsCiAgICAgICAgfCBOVU1CRVIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbnVtYmVyTGl0ZXJhbAogICAgICAgIHwgREFURVRJTUUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2RhdGVUaW1lTGl0ZXJhbAogICAgICAgIHwgVElNRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RpbWVMaXRlcmFsCiAgICAgICAgfCBxdWFudGl0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcXVhbnRpdHlMaXRlcmFsCiAgICAgICAgfCByYXRpbyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmF0aW9MaXRlcmFsCiAgICAgICAgOwoKaW50ZXJ2YWxTZWxlY3RvcgogICAgOiAvLyBUT0RPOiBDb25zaWRlciB0aGlzIGFzIGFuIGFsdGVybmF0aXZlIHN5bnRheCBmb3IgaW50ZXJ2YWxzLi4uICh3b3VsZCBuZWVkIHRvIGJlIG1vdmVkIHVwIHRvIGV4cHJlc3Npb24gdG8gbWFrZSBpdCB3b3JrKQogICAgLy9leHByZXNzaW9uICggJy4uJyB8ICcqLicgfCAnLionIHwgJyoqJyApIGV4cHJlc3Npb247CiAgICAnSW50ZXJ2YWwnICgnWyd8JygnKSBleHByZXNzaW9uICcsJyBleHByZXNzaW9uICgnXSd8JyknKQogICAgOwoKdHVwbGVTZWxlY3RvcgogICAgOiAnVHVwbGUnPyAneycgKCc6JyB8ICh0dXBsZUVsZW1lbnRTZWxlY3RvciAoJywnIHR1cGxlRWxlbWVudFNlbGVjdG9yKSopKSAnfScKICAgIDsKCnR1cGxlRWxlbWVudFNlbGVjdG9yCiAgICA6IGlkZW50aWZpZXIgJzonIGV4cHJlc3Npb24KICAgIDsKCmluc3RhbmNlU2VsZWN0b3IKICAgIDogbmFtZWRUeXBlU3BlY2lmaWVyICd7JyAoJzonIHwgKGluc3RhbmNlRWxlbWVudFNlbGVjdG9yICgnLCcgaW5zdGFuY2VFbGVtZW50U2VsZWN0b3IpKikpICd9JwogICAgOwoKaW5zdGFuY2VFbGVtZW50U2VsZWN0b3IKICAgIDogaWRlbnRpZmllciAnOicgZXhwcmVzc2lvbgogICAgOwoKbGlzdFNlbGVjdG9yCiAgICA6ICgnTGlzdCcgKCc8JyB0eXBlU3BlY2lmaWVyICc+Jyk/KT8gJ3snIChleHByZXNzaW9uICgnLCcgZXhwcmVzc2lvbikqKT8gJ30nCiAgICA7CgpkaXNwbGF5Q2xhdXNlCiAgICA6ICdkaXNwbGF5JyBTVFJJTkcKICAgIDsKCmNvZGVTZWxlY3RvcgogICAgOiAnQ29kZScgU1RSSU5HICdmcm9tJyBjb2Rlc3lzdGVtSWRlbnRpZmllciBkaXNwbGF5Q2xhdXNlPwogICAgOwoKY29uY2VwdFNlbGVjdG9yCiAgICA6ICdDb25jZXB0JyAneycgY29kZVNlbGVjdG9yICgnLCcgY29kZVNlbGVjdG9yKSogJ30nIGRpc3BsYXlDbGF1c2U/CiAgICA7CgppZGVudGlmaWVyCiAgICA6IElERU5USUZJRVIKICAgIHwgREVMSU1JVEVESURFTlRJRklFUgogICAgfCBRVU9URURJREVOVElGSUVSCiAgICB8ICdhbGwnCiAgICB8ICdDb2RlJwogICAgfCAnY29kZScKICAgIHwgJ0NvbmNlcHQnCiAgICB8ICdjb25jZXB0JwogICAgfCAnY29udGFpbnMnCiAgICB8ICdkYXRlJwogICAgfCAnZGlzcGxheScKICAgIHwgJ2Rpc3RpbmN0JwogICAgfCAnZW5kJwogICAgLy8gfCAnZXhpc3RzJyBOT1RFOiBUaGlzIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaW5jbHVkaW5nIGl0IGNhdXNlcyBhIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIHRoZSBBTlRMUiBwYXJzZXIsIHN0aWxsIGxvb2tpbmcgaW50byBhIGZpeCBmb3IgdGhpcwogICAgfCAnbm90JwogICAgfCAnc3RhcnQnCiAgICB8ICd0aW1lJwogICAgfCAndGltZXpvbmUnCiAgICB8ICd2ZXJzaW9uJwogICAgfCAnd2hlcmUnCiAgICA7CgpRVU9URURJREVOVElGSUVSCiAgICAgICAgOiAnIicgKEVTQyB8IC4pKj8gJyInCiAgICAgICAgOwoKZnJhZ21lbnQgRVNDCiAgICAgICAgOiAnXFwnIChbYCciXFwvZm5ydF0gfCBVTklDT0RFKSAgICAvLyBhbGxvdyBcYCwgXCcsIFwiLCBcXCwgXC8sIFxmLCBldGMuIGFuZCBcdVhYWAogICAgICAgIDsKCg=="
}